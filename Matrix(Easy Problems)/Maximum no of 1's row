#include <iostream>
using namespace std;

int b_search(int *arr,int low,int high){
    if(high >= low)  
    {  
        // Get the middle index  
        int mid = low + (high - low)/2;  
      
        // Check if the element at middle index is first 1  
        if ( ( mid == 0 || arr[mid-1] == 0) && arr[mid] == 1)  
            return mid;  
      
        // If the element is 0, recur for right side  
        else if (arr[mid] == 0)  
            return b_search(arr, (mid + 1), high);  
          
        // If element is not first 1, recur for left side  
        else
            return b_search(arr, low, (mid -1));  
    }
    return -1;  
}
int main() {
	//code
	int t;
	cin>>t;
	while(t--)
	{
	    int n, m, i, j, max=-1, k, ans=0;
	    cin>>n>>m;
	    int arr[n][m];
	    for(i=0; i<n; i++)
	    {
	        for(j=0; j<m; j++) cin>>arr[i][j];
	    }
	    for(i=0; i<n; i++)
	    {
	    k= b_search(arr[i], 0, m-1); //B_SEARCH IS USED TO FIND THE STARTING 1 IN EACH ROW
      if(k!=-1 && m-k>max)//M-K WILL BE MAXIMUM WHEN 1 IS PRESENT AT INDEX ZERO IN ARRAY
	    {
	        max=m-k;
	        ans=i;
	    }
	    
	    }
	    cout<<ans<<endl;
	}
  	return 0;
}
